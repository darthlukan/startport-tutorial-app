// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibcdex/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IbcdexPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*IbcdexPacketData_NoData
	//	*IbcdexPacketData_BuyOrderPacket
	Packet isIbcdexPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *IbcdexPacketData) Reset()         { *m = IbcdexPacketData{} }
func (m *IbcdexPacketData) String() string { return proto.CompactTextString(m) }
func (*IbcdexPacketData) ProtoMessage()    {}
func (*IbcdexPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf89e24a8e42d1af, []int{0}
}
func (m *IbcdexPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IbcdexPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IbcdexPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IbcdexPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IbcdexPacketData.Merge(m, src)
}
func (m *IbcdexPacketData) XXX_Size() int {
	return m.Size()
}
func (m *IbcdexPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_IbcdexPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_IbcdexPacketData proto.InternalMessageInfo

type isIbcdexPacketData_Packet interface {
	isIbcdexPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IbcdexPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type IbcdexPacketData_BuyOrderPacket struct {
	BuyOrderPacket *BuyOrderPacketData `protobuf:"bytes,2,opt,name=buyOrderPacket,proto3,oneof" json:"buyOrderPacket,omitempty"`
}

func (*IbcdexPacketData_NoData) isIbcdexPacketData_Packet()         {}
func (*IbcdexPacketData_BuyOrderPacket) isIbcdexPacketData_Packet() {}

func (m *IbcdexPacketData) GetPacket() isIbcdexPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *IbcdexPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*IbcdexPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *IbcdexPacketData) GetBuyOrderPacket() *BuyOrderPacketData {
	if x, ok := m.GetPacket().(*IbcdexPacketData_BuyOrderPacket); ok {
		return x.BuyOrderPacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IbcdexPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IbcdexPacketData_NoData)(nil),
		(*IbcdexPacketData_BuyOrderPacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf89e24a8e42d1af, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// this line is used by starport scaffolding # ibc/packet/proto/message
// BuyOrderPacketData defines a struct for the packet payload
type BuyOrderPacketData struct {
	AmountDenom string `protobuf:"bytes,1,opt,name=amountDenom,proto3" json:"amountDenom,omitempty"`
	Amount      int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	PriceDenom  string `protobuf:"bytes,3,opt,name=priceDenom,proto3" json:"priceDenom,omitempty"`
	Price       int32  `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *BuyOrderPacketData) Reset()         { *m = BuyOrderPacketData{} }
func (m *BuyOrderPacketData) String() string { return proto.CompactTextString(m) }
func (*BuyOrderPacketData) ProtoMessage()    {}
func (*BuyOrderPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf89e24a8e42d1af, []int{2}
}
func (m *BuyOrderPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyOrderPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyOrderPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyOrderPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyOrderPacketData.Merge(m, src)
}
func (m *BuyOrderPacketData) XXX_Size() int {
	return m.Size()
}
func (m *BuyOrderPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyOrderPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_BuyOrderPacketData proto.InternalMessageInfo

func (m *BuyOrderPacketData) GetAmountDenom() string {
	if m != nil {
		return m.AmountDenom
	}
	return ""
}

func (m *BuyOrderPacketData) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *BuyOrderPacketData) GetPriceDenom() string {
	if m != nil {
		return m.PriceDenom
	}
	return ""
}

func (m *BuyOrderPacketData) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

// BuyOrderPacketAck defines a struct for the packet acknowledgment
type BuyOrderPacketAck struct {
	RemainingAmount int32 `protobuf:"varint,1,opt,name=remainingAmount,proto3" json:"remainingAmount,omitempty"`
	Purchase        int32 `protobuf:"varint,2,opt,name=purchase,proto3" json:"purchase,omitempty"`
}

func (m *BuyOrderPacketAck) Reset()         { *m = BuyOrderPacketAck{} }
func (m *BuyOrderPacketAck) String() string { return proto.CompactTextString(m) }
func (*BuyOrderPacketAck) ProtoMessage()    {}
func (*BuyOrderPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf89e24a8e42d1af, []int{3}
}
func (m *BuyOrderPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyOrderPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyOrderPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyOrderPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyOrderPacketAck.Merge(m, src)
}
func (m *BuyOrderPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *BuyOrderPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyOrderPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_BuyOrderPacketAck proto.InternalMessageInfo

func (m *BuyOrderPacketAck) GetRemainingAmount() int32 {
	if m != nil {
		return m.RemainingAmount
	}
	return 0
}

func (m *BuyOrderPacketAck) GetPurchase() int32 {
	if m != nil {
		return m.Purchase
	}
	return 0
}

func init() {
	proto.RegisterType((*IbcdexPacketData)(nil), "darthlukan.starporttutorialapp.ibcdex.IbcdexPacketData")
	proto.RegisterType((*NoData)(nil), "darthlukan.starporttutorialapp.ibcdex.NoData")
	proto.RegisterType((*BuyOrderPacketData)(nil), "darthlukan.starporttutorialapp.ibcdex.BuyOrderPacketData")
	proto.RegisterType((*BuyOrderPacketAck)(nil), "darthlukan.starporttutorialapp.ibcdex.BuyOrderPacketAck")
}

func init() { proto.RegisterFile("ibcdex/packet.proto", fileDescriptor_bf89e24a8e42d1af) }

var fileDescriptor_bf89e24a8e42d1af = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x4a, 0x33, 0x41,
	0x14, 0xc5, 0x77, 0xbe, 0xcf, 0x2c, 0xf1, 0x06, 0xfc, 0x33, 0x8a, 0x04, 0x8b, 0x21, 0x2c, 0x08,
	0x69, 0xb2, 0x0b, 0x5a, 0x69, 0x97, 0x10, 0x50, 0x1b, 0x95, 0x60, 0xa3, 0xdd, 0xdd, 0xc9, 0x90,
	0x2c, 0xc9, 0xee, 0x0c, 0x93, 0x59, 0x48, 0x7a, 0x1f, 0xc0, 0xc7, 0x12, 0xab, 0x94, 0x96, 0x92,
	0x7d, 0x11, 0x71, 0x66, 0xa3, 0x49, 0x6c, 0xd2, 0xcd, 0xb9, 0xf0, 0x3b, 0x73, 0xee, 0xe1, 0xc2,
	0x51, 0x12, 0xf3, 0xbe, 0x98, 0x46, 0x0a, 0xf9, 0x48, 0x98, 0x50, 0x69, 0x69, 0x24, 0x3d, 0xeb,
	0xa3, 0x36, 0xc3, 0x71, 0x3e, 0xc2, 0x2c, 0x9c, 0x18, 0xd4, 0x4a, 0x6a, 0x63, 0x72, 0x23, 0x75,
	0x82, 0x63, 0x54, 0x2a, 0x74, 0x4c, 0xf0, 0x4e, 0xe0, 0xe0, 0xd6, 0x3e, 0x1f, 0x2c, 0xdd, 0x45,
	0x83, 0xf4, 0x1a, 0xfc, 0x4c, 0x7e, 0xbf, 0xea, 0xa4, 0x41, 0x9a, 0xb5, 0xf3, 0x56, 0xb8, 0x95,
	0x59, 0x78, 0x67, 0xa1, 0x1b, 0xaf, 0x57, 0xe2, 0x94, 0xc3, 0x5e, 0x9c, 0xcf, 0xee, 0x75, 0x5f,
	0x68, 0x67, 0x5f, 0xff, 0x67, 0x0d, 0x2f, 0xb7, 0x34, 0xec, 0xac, 0xc1, 0xa5, 0xf9, 0x86, 0x65,
	0xa7, 0x0a, 0xbe, 0xdb, 0x3c, 0xa8, 0x82, 0xef, 0x22, 0x04, 0x2f, 0x04, 0xe8, 0x5f, 0x98, 0x36,
	0xa0, 0x86, 0xa9, 0xcc, 0x33, 0xd3, 0x15, 0x99, 0x4c, 0xed, 0x76, 0xbb, 0xbd, 0xd5, 0x11, 0x3d,
	0x01, 0xdf, 0x49, 0x9b, 0xb4, 0xd2, 0x2b, 0x15, 0x65, 0x00, 0x4a, 0x27, 0x5c, 0x38, 0xf0, 0xbf,
	0x05, 0x57, 0x26, 0xf4, 0x18, 0x2a, 0x56, 0xd5, 0x77, 0x2c, 0xe6, 0x44, 0xf0, 0x04, 0x87, 0xeb,
	0x29, 0xda, 0x7c, 0x44, 0x9b, 0xb0, 0xaf, 0x45, 0x8a, 0x49, 0x96, 0x64, 0x83, 0xb6, 0xfb, 0x8b,
	0x58, 0x68, 0x73, 0x4c, 0x4f, 0xa1, 0xaa, 0x72, 0xcd, 0x87, 0x38, 0x11, 0x65, 0x9c, 0x1f, 0xdd,
	0x79, 0x7c, 0x5b, 0x30, 0x32, 0x5f, 0x30, 0xf2, 0xb9, 0x60, 0xe4, 0xb5, 0x60, 0xde, 0xbc, 0x60,
	0xde, 0x47, 0xc1, 0xbc, 0xe7, 0xab, 0x41, 0x62, 0x86, 0x79, 0x1c, 0x72, 0x99, 0x46, 0xbf, 0x35,
	0x47, 0xcb, 0x9a, 0x5b, 0xcb, 0x9e, 0x5b, 0xa8, 0x54, 0x34, 0x8d, 0xca, 0xe3, 0x31, 0x33, 0x25,
	0x26, 0xb1, 0x6f, 0x8f, 0xe7, 0xe2, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xba, 0x3b, 0x11, 0x53,
	0x02, 0x00, 0x00,
}

func (m *IbcdexPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IbcdexPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcdexPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IbcdexPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcdexPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *IbcdexPacketData_BuyOrderPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcdexPacketData_BuyOrderPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuyOrderPacket != nil {
		{
			size, err := m.BuyOrderPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BuyOrderPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyOrderPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyOrderPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PriceDenom) > 0 {
		i -= len(m.PriceDenom)
		copy(dAtA[i:], m.PriceDenom)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.PriceDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AmountDenom) > 0 {
		i -= len(m.AmountDenom)
		copy(dAtA[i:], m.AmountDenom)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.AmountDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuyOrderPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyOrderPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyOrderPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Purchase != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Purchase))
		i--
		dAtA[i] = 0x10
	}
	if m.RemainingAmount != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.RemainingAmount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IbcdexPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *IbcdexPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *IbcdexPacketData_BuyOrderPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuyOrderPacket != nil {
		l = m.BuyOrderPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BuyOrderPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AmountDenom)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPacket(uint64(m.Amount))
	}
	l = len(m.PriceDenom)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovPacket(uint64(m.Price))
	}
	return n
}

func (m *BuyOrderPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemainingAmount != 0 {
		n += 1 + sovPacket(uint64(m.RemainingAmount))
	}
	if m.Purchase != 0 {
		n += 1 + sovPacket(uint64(m.Purchase))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IbcdexPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcdexPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcdexPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &IbcdexPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrderPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BuyOrderPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &IbcdexPacketData_BuyOrderPacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyOrderPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyOrderPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyOrderPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyOrderPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyOrderPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyOrderPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingAmount", wireType)
			}
			m.RemainingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchase", wireType)
			}
			m.Purchase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Purchase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
